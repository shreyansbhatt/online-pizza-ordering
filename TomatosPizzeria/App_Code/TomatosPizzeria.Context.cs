//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

public partial class TP_DatabaseEntities : DbContext
{
    public TP_DatabaseEntities()
        : base("name=TP_DatabaseEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public virtual DbSet<tp_billing_detail> tp_billing_detail { get; set; }
    public virtual DbSet<tp_cart_detail> tp_cart_detail { get; set; }
    public virtual DbSet<tp_city> tp_city { get; set; }
    public virtual DbSet<tp_config> tp_config { get; set; }
    public virtual DbSet<tp_country> tp_country { get; set; }
    public virtual DbSet<tp_customer_order_details> tp_customer_order_details { get; set; }
    public virtual DbSet<tp_dailyspecials_offer> tp_dailyspecials_offer { get; set; }
    public virtual DbSet<tp_dollars_offer> tp_dollars_offer { get; set; }
    public virtual DbSet<tp_feast_forfive_offer> tp_feast_forfive_offer { get; set; }
    public virtual DbSet<tp_free_pizza_offer> tp_free_pizza_offer { get; set; }
    public virtual DbSet<tp_ingredient_category_mapping> tp_ingredient_category_mapping { get; set; }
    public virtual DbSet<tp_ingredient_details> tp_ingredient_details { get; set; }
    public virtual DbSet<tp_ingredient_product_mapping> tp_ingredient_product_mapping { get; set; }
    public virtual DbSet<tp_ingredients_product_size_mapping> tp_ingredients_product_size_mapping { get; set; }
    public virtual DbSet<tp_newsletter_information> tp_newsletter_information { get; set; }
    public virtual DbSet<tp_offer_master> tp_offer_master { get; set; }
    public virtual DbSet<tp_order_product_ingredients_specification> tp_order_product_ingredients_specification { get; set; }
    public virtual DbSet<tp_order_product_mapping> tp_order_product_mapping { get; set; }
    public virtual DbSet<tp_pizza_base_type> tp_pizza_base_type { get; set; }
    public virtual DbSet<tp_product_category> tp_product_category { get; set; }
    public virtual DbSet<tp_product_ingredient_fact_detail> tp_product_ingredient_fact_detail { get; set; }
    public virtual DbSet<tp_product_making_method> tp_product_making_method { get; set; }
    public virtual DbSet<tp_product_properties> tp_product_properties { get; set; }
    public virtual DbSet<tp_product_sizes> tp_product_sizes { get; set; }
    public virtual DbSet<tp_state> tp_state { get; set; }
    public virtual DbSet<tp_store_details> tp_store_details { get; set; }
    public virtual DbSet<tp_store_working_mapping> tp_store_working_mapping { get; set; }
    public virtual DbSet<tp_transaction_detail> tp_transaction_detail { get; set; }
    public virtual DbSet<tp_user_information> tp_user_information { get; set; }
    public virtual DbSet<tp_working_days> tp_working_days { get; set; }
    public virtual DbSet<tp_product_details> tp_product_details { get; set; }
    public virtual DbSet<tp_product_ingredient_fact_mapping> tp_product_ingredient_fact_mapping { get; set; }
    public virtual DbSet<tp_cart_ingredient_mapping> tp_cart_ingredient_mapping { get; set; }

    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));

        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }

    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));

        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }

    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }

    public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }

    public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }

    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }

    public virtual int sp_upgraddiagrams()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }
}
